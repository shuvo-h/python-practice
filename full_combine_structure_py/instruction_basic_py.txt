PY special keywords:
    - as, assert, break, continue, def, del
    - elif, else, except,
    - lambda, is, is not, None,
    - in, not in,
    - nonlocal: it is used to declare variable in a child function to tell that the variable is not local of that nested function.
    - not, or, pass, raise
    - with: to handle exception, 
    - yield: To return a list of values from a generator. Alternative of 'return' but we for multiple times call.




variable:
    variables are case sensitive. A & a are two different variable.
    - casting:  str(20), 
                int('20'),
                float('20.32')
                bool(1)
                list((1,2,3))  // convert tuple to list
                tuple([1,2,3]) // convert list to tuple
                set([1,2,3])    // convert list to set
                dict([(1,'one'),(2,'two'),(3,'three'),...])   // convert list of tuple to dictionary
                ord('a')         // convert character to Unicode integer representation

    type(): get the type of a variable. ie, type(age) == str | int | float


String:
    text = """random string"""
    - text[idx], text[startPosition : endPosition]          // positional access
    - for  eachChar in text:                                // loop on string
    - len(text)                                             // length of string 
    - if('char' in text), if('char' not in text)            // check if a part of string is present or not 
    - text.upper(), text.lower(), text.split(",")
    - text.replace("old string","new string")
    - text.strip(),
    - capitalize(), casefold(), count(),
    - endswith(), startswith()
    - find(), index(),
    - isalnum(), isalpha(), isascii(), isdecimal(), isdigit()
    - islower(), isnumeric(), isspace(), istitle(), isupper()
    - capitalize()
    - capitalize()
    - capitalize()
    - capitalize()

List        : Items are ordered, changeable, and allow duplicate values.
Tuple       : Items are ordered, unchangeable and allow duplicate values.
Set         : Unordered, unchangeable*, unindexed, unique items, does not allow duplicate values.
Dictionary  : Unordered, changeable, and does not allow duplicate keys.

List:
    list = ['apple','banana']
    listVar = list(('apple','banana'))     // create list from tuple
    - len(list)
    - type(list) == list
    - list[startIndex : endIndex], list[1], list[-1], 
    - list[startIdx,endIdx] = ['item1','item2','item3']    // change a range of elements like 3rd index list[3] = 'item33'. If insert less items than you replace, the new items will be inserted, and the remaining positioned items will removed as empty.
    - list.insert(indexNumber, item)                        // insert at specific index, it don't remove any existing item.
    - list.append(item)                                     // insert at the end of the list
    - list1.extend(list2)  OR    list1.extend(tuple2)       // append another list or tuple. it modify the original list. Similar to list1 = [...list1,list2];
    - list.remove(item)                                     // it will remove the specified item
    - list.pop(indexNumber)                                 // remove the specified indexed item, if not given the index, the last element will be removed
    - del list[index]                                       // delete the specified element like pop
    - del list                                              // delete the entire list
    - list.clear()                                          // remove all elements from the list
    - if 'apple' in list:
    - for item in list:
    - [print(item) for item in list]  OR [print(list[idx]*2) for idx in range(len(list))]   // it also works for tuple.
    - [print(item) for item in listOrTuple if condition == True]
    - list.sort(reverse = True, key= myCustomFunction, key=str.lower)                  // sort list: def myCustomFunction(item){return item - 5}
    - list.reverse()
    - list2 = list1.copy()  OR list2 = list(list1)                                      // copy list: use built-in-method or constructor
    - list3 = list1 + list2 OR list1.extend(list2) OR loop on list2 and append to list1 // join list
    - list.count("item")                                    // how much time "item" element is present in the list
    - 'apple','banana','cherry' = ['apple','banana','cherry']  // unpack or destructure



Tuples:
    tuple = ('apple',)                  // if only one element, must need a comma "," to be tupple
    tuple = ('apple','banana','cherry')
    tupleVar = tuple(['apple','banana','cherry'])
    - len(tuple)
    - tuple[-2:5]
    - if item in tuple:
    - UPDATE: convert tuple -> list -> update list -> convert back tuple
    - tuple += ('new item',)                    // add a new item to existing tuple
    - del tuple                                 // delete the entire tuple variable
    - ('apple','banana','cherry') = tuple       // unpack or destructure
    - ('apple','banana','*restTuple') = tuple   // *restTuple is the new tupple with rest of the items
    - for item in tuple: OR for idx in range(len(tuple)):
    - tuple3 = tuple1 + tuple2
    - tuple3 = tuple * 2                // it duplicate every item in the tuple
    - tuple.count()
    - tuple.index(item,searchStartIndex,searchEndIndex)         // find the index number of the item



Sets:
    - True vs 1, False vs 0 are treated as same value as duplicate.
    set = {'apple',True,0}
    setVar = set(('apple',True,0))
    - len(set)
    - for item in set:
    - if item in set:
    - set.add(newItem)
    - set1.update(set2,tuples, lists, dictionaries etc any iterable)                 // insert all items of set2 into set1 OR add two set into one
    - set.remove(item)        // rise error if item doesn't exist
    - set.discard(item)       // don't rise error if item doesn't exist
    - set.pop()                 // remove any random item because set are unorder and we don't know which item will be in the last to pop()
    - set.clear()
    - del set
    - for item in set: 
    - set3 = set1.union(set2)          // do union operation between 2 sets
    - set1.intersection_update(set2)    // keep only the items that are present in both sets and update to set1.
    - set3 = set1.intersection(set2)    // create new set by only the items that are present in both sets.
    - set1.symmetric_difference_update(set2)    // keep only the elements that are NOT present in both sets and update to set1.
    - add(), clear(), copy(), difference()
    - difference_update(), discard(), intersection()
    - intersection_update(), symmetric_difference(), 
    - symmetric_difference_update(), union(), update()
    - isdisjoint(), issubset(), issuperset()
    - pop(), remove(), 





Dictionary:
    - dict = {'key':['value',...]}
    - dictVar = dict(key1=value1,key2=value2,key3=value3,...)
    - dict2 = dict({"key1":"value1",.....})
    - len(dict)
    - type(dict)
    - dict.get("key1","defaultValueIfNotKeyPresent")                    // don't raise error if key not found, rather return the default value
    - dict["key1"]                                                      // raise error if key not present in the dict and not allow default value
    - dict.keys()           // return all keys
    - dict.values()         // return all values
    - dict.items()         // return all [(key1,value1),...]in tuple list
    - if "key1" in dict:    // chekc if a key is exist in dict
    - dict["key1"] = newValue1  
    - dict.update({"newKey":"newValue"})       // add new key:value
    - del dict                                  // delete the entire dictionary
    - del dict["key1"]                          // remove only a specific key from dict
    - dict.pop("key1")                          // remove or delete a key
    - dict.popitem()                            // remove the last key from the key
    - dict.clear()                              // 
    - for keyOrProperty in dict:
    - for keyOrProperty in dict.keys():
    - for value in dict.values():
    - for key, value in dict.items():
    - dict2 = dict1.copy()


Conditions:
    - if (): elif(): else:
    - if(): print("inline condition")
    - print("Yes") if(condition) else print("No")       // ternary operation
    - AND, OR, NOT, PASS, CONTINUE, BREAK,
    - while(): else:
    
Loop:
    - for item in list: else: print("Finished loop")            // else block will be executed each time after finish the for loop; but if we stop loop by "break", the else block will not be executed 
    - for item in list,string,range(x,y): else: print("Finished loop")

Function:
    - def funcName(arg1,arg2,*argN):        // *argN is a tuple on unlimited argument
        funcName("one", {"age":5},['apple'])
        funcName(arg2="two", arg1=45,)
    - def funcName(**args): print(args['age'],args['subject'])
        funcName(age=14,subject="science")
    
Lambda:
    - lambda is alternative of anymous function but must complete within a single line
    - lambda args: expression     
        eg. addFive = lambda num: num+5
            multiply = lambda num1,num2: num1 * num2


class in python:
    class Person:
        def __init__(self,name,age):    // constructor method
            self.name = name
            self.age = age

        def __str__(self):              // when we use the object variable, what will be returned
            return f"{self.name} is {self.age} years old"
        
        def to_dict(self):
            return {"name": self.name, "age": self.age}

    danielObj = Person("Daniel",24)
    print(danielObj)
    print(danielObj.to_dict())









