- create .venv environment
    >> python -m venv .venv
    >> .venv\Scripts\activate
- install django, restframework, jwt, cors
    >> pip install django djangorestframework djangorestframework-simplejwt django-cors-headers python-dotenv
- Create a project
    >> django-admin startproject projectName
- Setup .env config in config_env.py file and update setting.py file with this config_env.py file
    >> pip install psycopg2   // for postgreSQL DB
    >> pip install python-dotenv
        class Config:
            SECRET_KEY = os.getenv('SECRET_KEY')
            DEBUG = os.getenv('DEBUG', 'False') == 'True'  # Convert to boolean


- under project create an app
    >> python ./projectName/manage.py startapp newAppName

- add the new app to the installed_apps list on manage.py
    INSTALLED_APPS = [
        'django.contrib.admin',

        # Custom
        'api_app',

        # Third Party
        'import_export',
        'crispy_forms',
        'mathfilters',
        'django.contrib.humanize',
        'ckeditor',
        'ckeditor_uploader',
        'django_ckeditor_5',
        'taggit',
        'rest_framework',
        'rest_framework_simplejwt.token_blacklist',
        'corsheaders',
    ]
    MIDDLEWARE=[
        "corsheaders.middleware.CorsMiddleware",
    ]
    REST_FRAMEWORK = {}
    SIMPLE_JWT = {}
    CORS_ALLOWED_ORIGINS = ["http://localhost:5000",]

- Create model.py to create all table class
    class User()
    class Profile()
- Create admin.py and register the classes to admin.rest_framework_simplejwt
    admin.site.register(User,UserAdmin)
    admin.site.register(Profile,ProfileAdmin)

- in setting.py file, tell which data table model will be used for authentication
    AUTH_USER_MODEL = 'api_v1_appName.User'

- make the migration and migrate the database
    >> python prjectDir/manage.py makemigrations
    >> python prjectDir/manage.py migrate
- create super user to access admin dashboard of django
    >> python prjectDir/manage.py createsuperuser
- create a serilizer.py file to convert into json
    list of serializer and database update methods here
- create urls.py file and make API routes and connect with root api route
- create views.py file to define the request handler class view
